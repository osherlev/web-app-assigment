openapi: 3.0.0
info:
  title: Assignment
  description: "API documentation for Users, Posts, and Comments."
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /post/getAllPosts:
    get:
      tags:
        - Post
      summary: Get all posts
      description: Retrieve a list of all posts.
      responses:
        "200":
          description: A list of posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
  /post/{postId}:
    get:
      tags:
        - Post
      summary: Get a post by ID
      description: Retrieve a single post by its unique ID.
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: The requested post.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found.
        "500":
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /post/?sender={sender}:
    get:
      tags:
        - Post
      summary: Get posts by sender
      description: Retrieve all posts made by a specific sender.
      parameters:
        - name: sender
          in: query
          required: true
          description: The name of the sender.
          schema:
            type: string
      responses:
        "200":
          description: A list of posts by the sender.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          description: No posts found for this sender.
        "500":
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /post/createPost:
    post:
      tags:
        - Post
      summary: Add a new post
      description: Create a new post in the database.
      requestBody:
        description: Post object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        "201":
          description: Post successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
  /post/{id}:
    put:
      tags:
        - Post
      summary: Update a post
      description: Update the content of an existing post.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to update.
          schema:
            type: string
      requestBody:
        description: Post object with updated content.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        "200":
          description: Post successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "500":
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"



  /comment/byId/{commentId}:
    get:
      tags:
        - Comment
      summary: Get a comment by ID
      description: Retrieve a single comment by its unique ID.
      parameters:
        - name: commentId
          in: path
          required: true
          description: The ID of the comment to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: The requested comment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: Comment not found.
  /comment/bySender?sender={sender}:
    get:
      tags:
        - Comment
      summary: Get comments by sender
      description: Retrieve comments made by a specific sender.
      parameters:
        - name: sender
          in: query
          required: true
          description: name of the sender to retrieve comments for.
          schema:
            type: string
      responses:
        "200":
          description: List of comments successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "404":
          description: No comments found for the sender.
        "500":
          description: Internal server error.
  /comment/post/{postId}:
    get:
      tags:
        - Comment
      summary: Get comments by post ID
      description: Retrieve all comments for a specific post.
      parameters:
        - name: postId
          in: path
          required: true
          description: ID of the post to retrieve comments for.
          schema:
            type: string
      responses:
        "200":
          description: List of comments for the specified post.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "404":
          description: No comments found for the post.
        "500":
          description: Internal server error.
  /comment/createComment:
    post:
      tags:
        - Comment
      summary: Add a new comment
      description: Create a new comment for a specific post.
      requestBody:
        description: Comment object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        "201":
          description: Comment successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
  /comment/update/{commentId}:
    put:
      tags:
        - Comment
      summary: Update a comment
      description: Update the content of an existing comment.
      parameters:
        - name: commentId
          in: path
          required: true
          description: The ID of the comment to update.
          schema:
            type: string
      requestBody:
        description: Comment object with updated content.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        "200":
          description: Comment successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
  /comment/delete/{commentId}:
    delete:
      tags:
        - Comment
      summary: Delete a comment
      description: Delete a comment by its unique ID.
      parameters:
        - name: commentId
          in: path
          required: true
          description: The ID of the comment to delete.
          schema:
            type: string
      responses:
        "204":
          description: Comment successfully deleted.


  /user:
    get:
      tags:
        - User
      summary: Get all users
      description: Get all users from the database.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /user/email/{email}:
    get:
      tags:
        - User
      summary: Get user by email
      description: Retrieve a user by their email.
      parameters:
        - name: email
          in: path
          required: true
          description: Email of the user.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "500":
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /user/username/{username}:
    get:
      tags:
        - User
      summary: Get user by username
      description: Retrieve a user by their username.
      parameters:
        - name: username
          in: path
          required: true
          description: Username of the user.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "500":
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /user/registerUser:
    post:
      tags:
        - User
      summary: Register new user
      description: Register a new user.
      requestBody:
        description: User registration data.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
        "500":
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /user/login:
    post:
      tags:
        - User
      summary: User login
      description: Authenticate a user and return a session token or JWT.
      requestBody:
        description: User login credentials.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: Login successful, returns a token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
        "401":
          description: Invalid credentials.
        "500":
          description: An unexpected error occurred.
  /user/logout:
    post:
      tags:
        - User
      summary: User logout
      description: Invalidate the current session or JWT.
      responses:
        "200":
          description: Logout successful.
        "401":
          description: Unauthorized, not logged in.
        "500":
          description: An unexpected error occurred.
  /user/{userId}:
    put:
      tags:
        - User
      summary: Update user details
      description: Update information of an existing user by their ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update.
          schema:
            type: string
      requestBody:
        description: User object with updated information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
        "500":
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /user/{id}:
    delete:
      tags:
        - User
      summary: Delete a user
      description: Delete a user by their unique ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete.
          schema:
            type: string
      responses:
        "204":
          description: User successfully deleted.
        "404":
          description: User not found.
        "500":
          description: An unexpected error occurred.
components:
  schemas:
    Post:
      type: object
      properties:
        _id:
          type: string
          minLength: 24
          maxLength: 24
        content:
          type: string
        title:
          type: string
        sender:
          type: string
        __v:
          type: integer

    PostInput:
      type: object
      required:
        - title
        - sender
      properties:
        content:
          type: string
        sender:
          type: string
        title:
          type: string

    Comment:
      type: object
      properties:
        _id:
          type: string
          minLength: 24
          maxLength: 24
        postID:
          type: string
          minLength: 24
          maxLength: 24
        content:
          type: string
        sender:
          type: string
        date:
          type: string
          format: date-time
        __v:
          type: integer
    CommentInput:
      type: object
      required:
        - -postId
        - content
        - sender
      properties:
        postId:
          type: string
        content:
          type: string
        sender:
          type: string
    User:
      type: object
      properties:
        _id:
          type: string
          minLength: 24
          maxLength: 24
        username:
          type: string
          description: must be unique
        email:
          type: string
          description: must be unique
        password:
          type: string
        __v:
          type: integer
    UserInput:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    UnexpectedError:
      type: object
      properties:
        error:
          type: string
          example: An error occurred.
  requestBodies:
    Post:
      description: Post object input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostInput'
    Comment:
      description: Comment object input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentInput'